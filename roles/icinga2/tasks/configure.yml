---
- name: populate features (icinga2_dict_features)
  set_fact:
    icinga2_dict_features: "{{ icinga2_dict_features|default({}) | combine({ item.name: item }) }}"
  with_items: "{{ icinga2_features }}"

- name: main config file {{ icinga2_config_path + '/icinga2.conf' }}
  template:
    src: icinga2.conf.j2
    dest: "{{ icinga2_config_path + '/icinga2.conf' }}"
  notify: reload icinga2 service

- name: merge defaults and user specified constants (set_fact icinga2_combined_constants)
  set_fact:
    icinga2_combined_constants: "{{ icinga2_default_constants | combine(icinga2_constants) }}"

- name: set constants in {{ icinga2_config_path + '/constants.conf' }}
  template:
    src: constants.conf.j2
    dest: "{{ icinga2_config_path + '/constants.conf' }}"
  notify: reload icinga2 service

- name: features
  include_tasks: features.yml

- name: objects
  include_tasks: objects.yml

- name: collect config fragments
  find:
    path: "{{ icinga2_fragments_path }}"
    recurse: yes
    file_type: file
  register: result

- name: cleanup config files
  file:
    state: absent
    dest: "{{ item.path }}"
  loop: "{{ result.files }}"
  when: item.path not in icinga2_local_objects

- name: collect empty config dirs
  shell: >
    find {{ icinga2_fragments_path }} -type d -empty
  register: _empty_result
  changed_when: _empty_result.stdout_lines |length > 0

- name: remove empty config dirs
  file:
    state: absent
    path: "{{ item }}"
  loop: "{{ _empty_result.stdout_lines }}"

- name: collect config files
  find:
    path: "{{ icinga2_fragments_path }}"
    recurse: yes
    file_type: directory
    pattern: '*.conf'
  register: result

- name: ensure monitoring config directories
  ansible.builtin.file:
    path: "{{ icinga2_config_path }}/{{ item }}"
    state: directory
    owner: "{{ item.owner | default(icinga2_user) }}"
    group: "{{ item.group | default(icinga2_group) }}"
  loop: "{{ icinga2_config_directories }}"
  when:
    - icinga2_config_directories is defined
    - item.split('/')[0] == 'conf.d' or item.split('/')[0] == 'zones.d' or item.split('/')[0] == icinga2_confd
    # If multiple local configs folders can be defined this rule creates only
    # the directories starting with defined folders.
    # Related var looks like this:
    # icinga2_local_config:
    #  - conf.d
    #  - my_own_config.d
    #- item.split('/')[0] in icinga2_local_config or item.split('/')[0] == 'zones.d'

# Get all features which are in state absent
- set_fact:
    _absent_configured_features: "{{ _absent_configured_features|default([]) + [item] }}"
  loop: "{{ icinga2_features| rejectattr('state','undefined')| selectattr('state','match','absent')| map(attribute='name')| list }}"

- name: assemble config files with reload
  ansible.builtin.assemble:
    src: "{{ item.path }}"
    dest: "{{ item.path |regex_replace('^'+icinga2_fragments_path, '/etc/icinga2') }}"
    delimiter: ' '
  when: "item.path|basename|splitext|first not in _absent_configured_features|default([])"
  loop: "{{ result.files }}"
  notify: reload icinga2 service

- name: assemble features-available configs without reload
  ansible.builtin.assemble:
    src: "{{ item.path }}"
    dest: "{{ item.path |regex_replace('^'+icinga2_fragments_path, '/etc/icinga2') }}"
    delimiter: ' '
  when: "item.path|basename|splitext|first in _absent_configured_features|default([])"
  loop: "{{ result.files }}"

- name: remove empty config files
  ansible.builtin.file:
    state: absent
    path: "{{ item |regex_replace('^'+icinga2_fragments_path, '/etc/icinga2') }}"
  when: item.split('/')[3] == 'conf.d' or item.split('/')[3] == 'zones.d'
  loop: "{{ _empty_result.stdout_lines }}"
  notify: reload icinga2 service
